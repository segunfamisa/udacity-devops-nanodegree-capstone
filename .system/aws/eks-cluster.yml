Description: >
    CloudFormation script to set up EKS infrastructure for the project.

Parameters:
    EnvironmentName:
        Description: Environment name
        Type: String

    EksIamRoleName:
        Description: Role name for the EKS IAM role.
        Type: String
        Default: "EksClusterIamRole"

    ClusterName:
        Description: Name for the EKS cluster.
        Type: String

    NodeGroupName:
        Description: Unique identifier for the Node Group.
        Type: String

    NodeImageId:
        Description: Image Id for the cluster
        Type: AWS::EC2::Image::Id

    KeyName:
        Description: Key pair name for the nodes
        Type: String

    BootstrapArguments:
        Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
        Type: String

Resources:

    EksClusterIamRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service:
                                - eks.amazonaws.com
                        Action:
                            - 'sts:AssumeRole'
            RoleName: !Ref EksIamRoleName
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
                - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

    ClusterControlPlaneSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Cluster communication with worker nodes
            VpcId:
                Fn::ImportValue:
                  !Sub ${EnvironmentName}-VPCID

    EksCluster:
        Type: AWS::EKS::Cluster
        Properties:
            Name: !Ref ClusterName
            RoleArn: !GetAtt EksClusterIamRole.Arn
            ResourcesVpcConfig:
                SecurityGroupIds:
                    - !Ref ClusterControlPlaneSecurityGroup
                SubnetIds:
                    - Fn::ImportValue: !Sub ${EnvironmentName}-PUB1-SN
                    - Fn::ImportValue: !Sub ${EnvironmentName}-PUB2-SN
                    - Fn::ImportValue: !Sub ${EnvironmentName}-PRI1-SN
                    - Fn::ImportValue: !Sub ${EnvironmentName}-PRI2-SN

    # Worker node role
    NodeInstanceRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - ec2.amazonaws.com
                      Action:
                          - "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
                - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
                - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
            Path: /

    NodeInstanceProfile:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            Path: /
            Roles:
                - !Ref NodeInstanceRole

    NodeSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: Security group for all nodes in the cluster
            Tags:
                - Key: !Sub kubernetes.io/cluster/${ClusterName}
                  Value: owned
                - Key: 'Name'
                  Value:  !Sub ${EnvironmentName}-NodeSecurityGroup
            VpcId:
                Fn::ImportValue: !Sub ${EnvironmentName}-VPCID

    NodeSecurityGroupIngress:
        Type: "AWS::EC2::SecurityGroupIngress"
        DependsOn: NodeSecurityGroup
        Properties:
            Description: Allow node to communicate with each other
            FromPort: 0
            GroupId: !Ref NodeSecurityGroup
            IpProtocol: "-1"
            SourceSecurityGroupId: !Ref NodeSecurityGroup
            ToPort: 65535

    ClusterControlPlaneSecurityGroupIngress:
        Type: "AWS::EC2::SecurityGroupIngress"
        DependsOn: NodeSecurityGroup
        Properties:
            Description: Allow pods to communicate with the cluster API Server
            FromPort: 443
            GroupId: !Ref ClusterControlPlaneSecurityGroup
            IpProtocol: tcp
            SourceSecurityGroupId: !Ref NodeSecurityGroup
            ToPort: 443

    ControlPlaneEgressToNodeSecurityGroupOn443:
        Type: "AWS::EC2::SecurityGroupEgress"
        DependsOn: NodeSecurityGroup
        Properties:
            Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
            DestinationSecurityGroupId: !Ref NodeSecurityGroup
            FromPort: 443
            GroupId: !Ref ClusterControlPlaneSecurityGroup
            IpProtocol: tcp
            ToPort: 443

    NodeSecurityGroupFromControlPlaneIngress:
        Type: "AWS::EC2::SecurityGroupIngress"
        DependsOn: NodeSecurityGroup
        Properties:
            Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
            FromPort: 1025
            GroupId: !Ref NodeSecurityGroup
            IpProtocol: tcp
            SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
            ToPort: 65535

    NodeSecurityGroupFromControlPlaneOn443Ingress:
        Type: "AWS::EC2::SecurityGroupIngress"
        DependsOn: NodeSecurityGroup
        Properties:
            Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
            FromPort: 443
            GroupId: !Ref NodeSecurityGroup
            IpProtocol: tcp
            SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
            ToPort: 443

    NodeLaunchConfig:
        Type: "AWS::AutoScaling::LaunchConfiguration"
        Properties:
            AssociatePublicIpAddress: "true"
            BlockDeviceMappings:
                -   DeviceName: /dev/xvda
                    Ebs:
                        DeleteOnTermination: true
                        VolumeSize: 10
                        VolumeType: gp2
            IamInstanceProfile: !Ref NodeInstanceProfile
            ImageId: !Ref NodeImageId
            InstanceType: "t2.micro"
            KeyName: !Ref KeyName
            SecurityGroups:
                -   Ref: NodeSecurityGroup
            UserData: !Base64
                "Fn::Sub": |
                    #!/bin/bash
                    set -o xtrace
                    /etc/eks/bootstrap.sh ${ClusterName} ${BootstrapArguments}
                    /opt/aws/bin/cfn-signal --exit-code $? \
                             --stack  ${AWS::StackName} \
                             --resource NodeGroup  \
                             --region ${AWS::Region}

    NodeGroup:
        Type: "AWS::AutoScaling::AutoScalingGroup"
        Properties:
            DesiredCapacity: 2
            LaunchConfigurationName: !Ref NodeLaunchConfig
            MaxSize: 4
            MinSize: 2
            Tags:
                -   Key: Name
                    PropagateAtLaunch: "true"
                    Value: !Sub ${ClusterName}-${NodeGroupName}-Node
                -   Key: !Sub kubernetes.io/cluster/${ClusterName}
                    PropagateAtLaunch: "true"
                    Value: owned
            VPCZoneIdentifier:
                -   Fn::ImportValue: !Sub ${EnvironmentName}-PUB1-SN
                -   Fn::ImportValue: !Sub ${EnvironmentName}-PUB2-SN
                -   Fn::ImportValue: !Sub ${EnvironmentName}-PRI1-SN
                -   Fn::ImportValue: !Sub ${EnvironmentName}-PRI2-SN
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MaxBatchSize: "1"
                MinInstancesInService: "2"
                PauseTime: PT5M

Outputs:

    EksIamRoleArn:
        Description: A reference to the cluster role ARN
        Value: !Ref EksClusterIamRole
        Export:
            Name: !Sub ${EnvironmentName}-EksClusterIamRole

    SecurityGroups:
        Description: Security group for the cluster control plane
        Value: !Join [",", [!Ref ClusterControlPlaneSecurityGroup]]

    NodeSecurityGroup:
        Description: The security group for the node group
        Value: !Ref NodeSecurityGroup

    NodeInstanceRole:
        Description: The node instance role
        Value: !GetAtt NodeInstanceRole.Arn
